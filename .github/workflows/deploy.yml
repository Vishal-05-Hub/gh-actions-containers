name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    #container: If the job is not working inside a container then config will be different.
      #image: node:16
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb # Fixed protocol name that should be used.
      MONGODB_CLUSTER_ADDRESS: 127.0.0.1:27017
      # As we running our job in container itself then we have to specify address along with port
      # it is super easy to use configure the service container also and here we are 
      # using the same label name as we are using in the service conatiner to run our tests here.
      # For running without container 
      MONGODB_USERNAME: root # same credentials as of mongo db service container
      MONGODB_PASSWORD: example
      PORT: 8080
    services:
      mongodb: # It's a label name
        image: mongo # Docker image name for creating mongodb
        ports:
          # Transfering of porting from service container to runner machine.
          - 27017:27017 # 27017 Port for connecting mongodb server
        env:
          # This is for setting the credentials of the temp mongodb used for running 
          # the test and it will go down when tests are runned so no issue to give 
          # credentails here.
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
    # Now configuring all these things, now we will be used isolated mongodb service 
    # conatiner instead of usinf=g our own mongodb.
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
